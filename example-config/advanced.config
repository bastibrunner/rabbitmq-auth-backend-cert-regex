[
  {rabbitmq_auth_backend_cert_regex, [
    {rules, [
      %% Admin users with full access to all vhosts and resources
      {".*CN=admin.*", [
        {vhost, ".*"},
        {configure, ".*"},
        {write, ".*"},
        {read, ".*"}
      ]},
      
      %% Power users with access to most resources but limited vhosts
      {".*CN=poweruser.*", [
        {vhost, "prod_vhost|staging_vhost"},
        {configure, ".*"},
        {write, ".*"},
        {read, ".*"}
      ]},
      
      %% Regular users with limited access
      {".*CN=user.*", [
        {vhost, "user_vhost"},
        {configure, "user_queue|user_exchange"},
        {write, "user_queue|user_exchange"},
        {read, "user_queue|user_exchange"}
      ]},
      
      %% Read-only users
      {".*CN=reader.*", [
        {vhost, "readonly_vhost"},
        {configure, ""},
        {write, ""},
        {read, ".*"}
      ]},
      
      %% Specific user with custom permissions
      {".*CN=alice.*", [
        {vhost, "alice_vhost"},
        {configure, "alice_queue|alice_exchange"},
        {write, "alice_queue|alice_exchange"},
        {read, "alice_queue|alice_exchange|shared_queue"}
      ]},
      
      %% Service account with specific resource access
      {".*CN=service.*", [
        {vhost, "service_vhost"},
        {configure, "service_queue"},
        {write, "service_queue"},
        {read, "service_queue|metrics_queue"}
      ]}
    ]}
  ]},
  
  %% Additional RabbitMQ configuration
  {rabbit, [
    %% Enable detailed logging for debugging
    {log, [
      {connection, [{file, "/var/log/rabbitmq/connection.log"}]},
      {channel, [{file, "/var/log/rabbitmq/channel.log"}]},
      {federation, [{file, "/var/log/rabbitmq/federation.log"}]}
    ]},
    
    %% SSL configuration
    {ssl_options, [
      {verify, verify_peer},
      {fail_if_no_peer_cert, true},
      {honor_cipher_order, true},
      {honor_ecc_order, true}
    ]}
  ]},
  
  %% Logging configuration
  {kernel, [
    {logger_level, info},
    {logger, [
      {handler, default, logger_std_h, #{
        level => info,
        formatter => {logger_formatter, #{
          template => [time, " ", level, " ", msg, "\n"]
        }}
      }}
    ]}
  ]}
].
