load("@bazel_gazelle//:def.bzl", "gazelle")
load("@rules_erlang//gazelle:def.bzl", "GAZELLE_ERLANG_RUNTIME_DEPS")
load("@rules_erlang//:erlang_bytecode2.bzl", "erlc_opts")
load("@rules_erlang//:erlang_app.bzl", "erlang_app", "test_erlang_app")
load("@rules_erlang//:xref2.bzl", "xref")
load("@rules_erlang//:dialyze.bzl", "dialyze", "plt")
load("@rules_erlang//:eunit2.bzl", "eunit")
load("@rules_erlang//:ez.bzl", "ez")

# gazelle:exclude .github
# gazelle:exclude .elixir_ls
# gazelle:exclude .erlang.mk
# gazelle:exclude .vscode

gazelle(
    name = "gazelle",
    data = GAZELLE_ERLANG_RUNTIME_DEPS,
    extra_args = [
        "--app_name",
        module_name(),
        "--verbose",
    ],
    gazelle = "@rules_erlang//gazelle:gazelle_erlang_binary",
)

erlc_opts(
    name = "erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+debug_info",
        ],
        "//conditions:default": [
            "+debug_info",
            "+deterministic",
        ],
    }),
    visibility = [":__subpackages__"],
)

erlc_opts(
    name = "test_erlc_opts",
    values = select({
        "@rules_erlang//:debug_build": [
            "+debug_info",
            "-DTEST=1",
        ],
        "//conditions:default": [
            "+debug_info",
            "+deterministic",
            "-DTEST=1",
        ],
    }),
    visibility = [":__subpackages__"],
)

plt(
    name = "base_plt",
    visibility = [":__subpackages__"],
)

erlang_app(
    name = "erlang_app",
    srcs = glob(["src/**/*.erl"]),
    app_description = "RabbitMQ Auth Backend Cert Regex Plugin",
    app_module = "rabbit_auth_backend_cert_regex_app",
    app_name = "rabbitmq_auth_backend_cert_regex",
    app_version = module_version(),
    # license_files = ["LICENSE"],  # No LICENSE file exists
    deps = [],
)

alias(
    name = "rabbitmq_auth_backend_cert_regex",
    actual = ":erlang_app",
    visibility = ["//visibility:public"],
)

test_erlang_app(
    name = "test_erlang_app",
    srcs = glob(["src/**/*.erl", "test/**/*.erl"]),
    app_name = "rabbitmq_auth_backend_cert_regex",
    deps = [":erlang_app"],
)

xref(
    name = "xref",
    target = ":erlang_app",
)

plt(
    name = "deps_plt",
    apps = [
        "mnesia",  # keep
    ],
    for_target = ":erlang_app",
    plt = "//:base_plt",
)

dialyze(
    name = "dialyze",
    plt = ":deps_plt",
    target = ":erlang_app",
)

eunit(
    name = "eunit",
    target = ":test_erlang_app",
)

ez(
    name = "ez",
    app = ":erlang_app",
)